apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prom
  namespace: mogenius-argo-cd
  labels:
    managed-by: mogenius
spec:
  destination:
    name: in-cluster
    namespace: prometheus
  syncPolicy:
    automated:
      prune: true
  project: mogenius
  source:
    repoURL: https://helm.mogenius.com/public
    targetRevision: 1.2.2
    chart: moac
    helm:
      releaseName: prom
      valuesObject:
        services:
          - prometheus-server:
              finalizers:
                - service.kubernetes.io/load-balancer-cleanup
              labels:
                app.kubernetes.io/component: server
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 3.5.0
              allocateLoadBalancerNodePorts: true
              clusterIP: 10.43.21.63
              clusterIPs:
                - 10.43.21.63
              externalTrafficPolicy: Cluster
              internalTrafficPolicy: Cluster
              ipFamilies:
                - IPv4
              ipFamilyPolicy: SingleStack
              ports:
                - name: http
                  nodePort: 31459
                  port: 80
                  protocol: TCP
                  targetPort: http
              selector:
                app.kubernetes.io/component: server
                app.kubernetes.io/instance: prometheus
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
              sessionAffinity: ClientIP
              sessionAffinityConfig:
                clientIP:
                  timeoutSeconds: 10800
              type: LoadBalancer
          - prometheus-alertmanager:
              finalizers:
                - service.kubernetes.io/load-balancer-cleanup
              labels:
                app.kubernetes.io/component: alertmanager
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 0.28.1
              allocateLoadBalancerNodePorts: true
              clusterIP: 10.43.110.209
              clusterIPs:
                - 10.43.110.209
              externalTrafficPolicy: Cluster
              internalTrafficPolicy: Cluster
              ipFamilies:
                - IPv4
              ipFamilyPolicy: SingleStack
              ports:
                - name: http
                  nodePort: 30962
                  port: 80
                  protocol: TCP
                  targetPort: http
              selector:
                app.kubernetes.io/component: alertmanager
                app.kubernetes.io/instance: prometheus
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
              sessionAffinity: None
              type: LoadBalancer
        rawResources:
          - apiVersion: networking.k8s.io/v1
            kind: NetworkPolicy
            metadata:
              labels:
                app.kubernetes.io/component: alertmanager
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 3.5.0
              name: prometheus-alertmanager
              namespace: prometheus
            spec:
              ingress:
                - ports:
                    - port: 9093
                      protocol: TCP
                    - port: 80
                      protocol: TCP
              podSelector:
                matchLabels:
                  app.kubernetes.io/component: alertmanager
                  app.kubernetes.io/instance: prometheus
                  app.kubernetes.io/name: prometheus
                  app.kubernetes.io/part-of: prometheus
              policyTypes:
                - Ingress
                - Egress
          - apiVersion: networking.k8s.io/v1
            kind: NetworkPolicy
            metadata:
              labels:
                app.kubernetes.io/component: server
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 3.5.0
              name: prometheus-server
              namespace: prometheus
            spec:
              ingress:
                - ports:
                    - port: 9090
                      protocol: TCP
                    - port: 80
                      protocol: TCP
              podSelector:
                matchLabels:
                  app.kubernetes.io/component: server
                  app.kubernetes.io/instance: prometheus
                  app.kubernetes.io/name: prometheus
                  app.kubernetes.io/part-of: prometheus
              policyTypes:
                - Ingress
                - Egress
          - apiVersion: apps/v1
            kind: Deployment
            metadata:
              labels:
                app.kubernetes.io/component: server
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 3.5.0
              name: prometheus-server
              namespace: prometheus
            spec:
              progressDeadlineSeconds: 600
              replicas: 1
              revisionHistoryLimit: 10
              selector:
                matchLabels:
                  app.kubernetes.io/component: server
                  app.kubernetes.io/instance: prometheus
                  app.kubernetes.io/name: prometheus
                  app.kubernetes.io/part-of: prometheus
              strategy:
                rollingUpdate:
                  maxSurge: 25%
                  maxUnavailable: 25%
                type: RollingUpdate
              template:
                metadata:
                  annotations:
                    checksum/configmap: 03713d9af3ee381e51a0b1cc5336fdd446533c1a31854506174bec4e13339040
                  labels:
                    app.kubernetes.io/component: server
                    app.kubernetes.io/instance: prometheus
                    app.kubernetes.io/managed-by: Helm
                    app.kubernetes.io/name: prometheus
                    app.kubernetes.io/part-of: prometheus
                    app.kubernetes.io/version: 3.5.0
                    helm.sh/chart: prometheus-2.1.23
                spec:
                  affinity:
                    podAntiAffinity:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        - podAffinityTerm:
                            labelSelector:
                              matchLabels:
                                app.kubernetes.io/component: server
                                app.kubernetes.io/instance: prometheus
                                app.kubernetes.io/name: prometheus
                            topologyKey: kubernetes.io/hostname
                          weight: 1
                  automountServiceAccountToken: true
                  containers:
                    - args:
                        - '--config.file=/opt/bitnami/prometheus/conf/prometheus.yaml'
                        - '--storage.tsdb.path=/bitnami/prometheus/data'
                        - '--storage.tsdb.retention.time=10d'
                        - '--storage.tsdb.retention.size=0'
                        - '--log.level=info'
                        - '--log.format=logfmt'
                        - '--web.listen-address=:9090'
                        - '--web.console.libraries=/opt/bitnami/prometheus/conf/console_libraries'
                        - '--web.console.templates=/opt/bitnami/prometheus/conf/consoles'
                        - '--web.route-prefix=/'
                      image: docker.io/bitnami/prometheus:3.5.0-debian-12-r3
                      imagePullPolicy: IfNotPresent
                      livenessProbe:
                        failureThreshold: 3
                        httpGet:
                          path: /-/healthy
                          port: http
                          scheme: HTTP
                        initialDelaySeconds: 5
                        periodSeconds: 20
                        successThreshold: 1
                        timeoutSeconds: 3
                      name: prometheus
                      ports:
                        - containerPort: 9090
                          name: http
                          protocol: TCP
                      readinessProbe:
                        failureThreshold: 5
                        httpGet:
                          path: /-/ready
                          port: http
                          scheme: HTTP
                        initialDelaySeconds: 5
                        periodSeconds: 10
                        successThreshold: 1
                        timeoutSeconds: 2
                      resources:
                        limits:
                          cpu: 150m
                          ephemeral-storage: 2Gi
                          memory: 192Mi
                        requests:
                          cpu: 100m
                          ephemeral-storage: 50Mi
                          memory: 128Mi
                      securityContext:
                        allowPrivilegeEscalation: false
                        capabilities:
                          drop:
                            - ALL
                        privileged: false
                        readOnlyRootFilesystem: true
                        runAsGroup: 1001
                        runAsNonRoot: true
                        runAsUser: 1001
                        seccompProfile:
                          type: RuntimeDefault
                      terminationMessagePath: /dev/termination-log
                      terminationMessagePolicy: File
                      volumeMounts:
                        - mountPath: /tmp
                          name: empty-dir
                          subPath: tmp-dir
                        - mountPath: /opt/bitnami/prometheus/conf
                          name: config
                          readOnly: true
                        - mountPath: /bitnami/prometheus/data
                          name: data
                  dnsPolicy: ClusterFirst
                  restartPolicy: Always
                  schedulerName: default-scheduler
                  securityContext:
                    fsGroup: 1001
                    fsGroupChangePolicy: Always
                  serviceAccount: prometheus-server
                  serviceAccountName: prometheus-server
                  terminationGracePeriodSeconds: 30
                  volumes:
                    - name: empty-dir
                    - configMap:
                        defaultMode: 420
                        name: prometheus-server
                      name: config
                    - name: data
          - apiVersion: v1
            automountServiceAccountToken: false
            kind: ServiceAccount
            metadata:
              annotations: {}
              labels:
                app.kubernetes.io/component: server
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 3.5.0
              name: prometheus-server
              namespace: prometheus
          - apiVersion: apps/v1
            kind: StatefulSet
            metadata:
              annotations: {}
              labels:
                app.kubernetes.io/component: alertmanager
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 0.28.1
              name: prometheus-alertmanager
              namespace: prometheus
            spec:
              persistentVolumeClaimRetentionPolicy:
                whenDeleted: Retain
                whenScaled: Retain
              podManagementPolicy: OrderedReady
              replicas: 1
              revisionHistoryLimit: 10
              selector:
                matchLabels:
                  app.kubernetes.io/component: alertmanager
                  app.kubernetes.io/instance: prometheus
                  app.kubernetes.io/name: prometheus
                  app.kubernetes.io/part-of: prometheus
              serviceName: prometheus-alertmanager-headless
              template:
                metadata:
                  labels:
                    app.kubernetes.io/component: alertmanager
                    app.kubernetes.io/instance: prometheus
                    app.kubernetes.io/managed-by: Helm
                    app.kubernetes.io/name: prometheus
                    app.kubernetes.io/part-of: prometheus
                    app.kubernetes.io/version: 0.28.1
                    helm.sh/chart: prometheus-2.1.23
                spec:
                  affinity:
                    podAntiAffinity:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        - podAffinityTerm:
                            labelSelector:
                              matchLabels:
                                app.kubernetes.io/component: alertmanager
                                app.kubernetes.io/instance: prometheus
                                app.kubernetes.io/name: prometheus
                            topologyKey: kubernetes.io/hostname
                          weight: 1
                  automountServiceAccountToken: false
                  containers:
                    - args:
                        - '--config.file=/opt/bitnami/alertmanager/conf/alertmanager.yaml'
                        - '--storage.path=/opt/bitnami/alertmanager/data'
                        - '--web.listen-address=0.0.0.0:9093'
                      env:
                        - name: POD_IP
                          valueFrom:
                            fieldRef:
                              apiVersion: v1
                              fieldPath: status.podIP
                      image: docker.io/bitnami/alertmanager:0.28.1-debian-12-r15
                      imagePullPolicy: IfNotPresent
                      livenessProbe:
                        failureThreshold: 3
                        httpGet:
                          path: /-/healthy
                          port: http
                          scheme: HTTP
                        initialDelaySeconds: 5
                        periodSeconds: 20
                        successThreshold: 1
                        timeoutSeconds: 3
                      name: alertmanager
                      ports:
                        - containerPort: 9093
                          name: http
                          protocol: TCP
                        - containerPort: 9094
                          name: tcp-cluster
                          protocol: TCP
                        - containerPort: 9094
                          name: udp-cluster
                          protocol: UDP
                      readinessProbe:
                        failureThreshold: 5
                        httpGet:
                          path: /-/ready
                          port: http
                          scheme: HTTP
                        initialDelaySeconds: 5
                        periodSeconds: 10
                        successThreshold: 1
                        timeoutSeconds: 2
                      resources:
                        limits:
                          cpu: 150m
                          ephemeral-storage: 2Gi
                          memory: 192Mi
                        requests:
                          cpu: 100m
                          ephemeral-storage: 50Mi
                          memory: 128Mi
                      securityContext:
                        allowPrivilegeEscalation: false
                        capabilities:
                          drop:
                            - ALL
                        privileged: false
                        readOnlyRootFilesystem: true
                        runAsGroup: 1001
                        runAsNonRoot: true
                        runAsUser: 1001
                        seLinuxOptions: {}
                        seccompProfile:
                          type: RuntimeDefault
                      terminationMessagePath: /dev/termination-log
                      terminationMessagePolicy: File
                      volumeMounts:
                        - mountPath: /tmp
                          name: empty-dir
                          subPath: tmp-dir
                        - mountPath: /opt/bitnami/alertmanager/conf
                          name: config
                          readOnly: true
                        - mountPath: /bitnami/alertmanager/data
                          name: data
                  dnsPolicy: ClusterFirst
                  restartPolicy: Always
                  schedulerName: default-scheduler
                  securityContext:
                    fsGroup: 1001
                    fsGroupChangePolicy: Always
                  serviceAccount: prometheus-alertmanager
                  serviceAccountName: prometheus-alertmanager
                  terminationGracePeriodSeconds: 30
                  volumes:
                    - emptyDir: {}
                      name: empty-dir
                    - configMap:
                        defaultMode: 420
                        name: prometheus-alertmanager
                      name: config
                    - emptyDir: {}
                      name: data
              updateStrategy:
                type: RollingUpdate
          - apiVersion: v1
            automountServiceAccountToken: false
            kind: ServiceAccount
            metadata:
              annotations: {}
              labels:
                app.kubernetes.io/component: alertmanager
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 0.28.1
              name: prometheus-alertmanager
              namespace: prometheus
          - apiVersion: policy/v1
            kind: PodDisruptionBudget
            metadata:
              annotations: {}
              labels:
                app.kubernetes.io/component: alertmanager
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 0.28.1
              name: prometheus-alertmanager
              namespace: prometheus
            spec:
              maxUnavailable: 1
              selector:
                matchLabels:
                  app.kubernetes.io/component: alertmanager
                  app.kubernetes.io/instance: prometheus
                  app.kubernetes.io/name: prometheus
                  app.kubernetes.io/part-of: prometheus
          - apiVersion: policy/v1
            kind: PodDisruptionBudget
            metadata:
              annotations: {}
              labels:
                app.kubernetes.io/component: server
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 3.5.0
              name: prometheus-server
              namespace: prometheus
            spec:
              maxUnavailable: 1
              selector:
                matchLabels:
                  app.kubernetes.io/component: server
                  app.kubernetes.io/instance: prometheus
                  app.kubernetes.io/name: prometheus
                  app.kubernetes.io/part-of: prometheus
        configmaps:
          - prometheus-alertmanager:
              labels:
                app.kubernetes.io/component: alertmanager
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 0.28.1
              data:
                alertmanager.yaml: |
                  receivers:
                    - name: default-receiver
                  route:
                    group_wait: 10s
                    group_interval: 5m
                    receiver: default-receiver
                    repeat_interval: 3h
          - prometheus-server:
              labels:
                app.kubernetes.io/component: server
                app.kubernetes.io/name: prometheus
                app.kubernetes.io/part-of: prometheus
                app.kubernetes.io/version: 3.5.0
              data:
                prometheus.yaml: |
                  global:
                    external_labels:
                      monitor: prometheus
                  scrape_configs:
                    - job_name: prometheus
                      kubernetes_sd_configs:
                        - role: endpoints
                          namespaces:
                            names:
                            - prometheus
                      metrics_path: /metrics
                      relabel_configs:
                        - source_labels:
                            - job
                          target_label: __tmp_prometheus_job_name
                        - action: keep
                          source_labels:
                            - __meta_kubernetes_service_label_app_kubernetes_io_component
                            - __meta_kubernetes_service_labelpresent_app_kubernetes_io_component
                          regex: (server);true
                        - action: keep
                          source_labels:
                            - __meta_kubernetes_service_label_app_kubernetes_io_instance
                            - __meta_kubernetes_service_labelpresent_app_kubernetes_io_instance
                          regex: (prometheus);true
                        - action: keep
                          source_labels:
                            - __meta_kubernetes_service_label_app_kubernetes_io_name
                            - __meta_kubernetes_service_labelpresent_app_kubernetes_io_name
                          regex: (prometheus);true
                        - action: keep
                          source_labels:
                            - __meta_kubernetes_endpoint_port_name
                          regex: http
                        - source_labels:
                            - __meta_kubernetes_endpoint_address_target_kind
                            - __meta_kubernetes_endpoint_address_target_name
                          separator: ;
                          regex: Node;(.*)
                          replacement: ${1}
                          target_label: node
                        - source_labels:
                            - __meta_kubernetes_endpoint_address_target_kind
                            - __meta_kubernetes_endpoint_address_target_name
                          separator: ;
                          regex: Pod;(.*)
                          replacement: ${1}
                          target_label: pod
                        - source_labels:
                            - __meta_kubernetes_namespace
                          target_label: namespace
                        - source_labels:
                            - __meta_kubernetes_service_name
                          target_label: service
                        - source_labels:
                            - __meta_kubernetes_pod_name
                          target_label: pod
                        - source_labels:
                            - __meta_kubernetes_pod_container_name
                          target_label: container
                        - action: drop
                          source_labels:
                            - __meta_kubernetes_pod_phase
                          regex: (Failed|Succeeded)
                        - source_labels:
                            - __meta_kubernetes_service_name
                          target_label: job
                          replacement: ${1}
                        - target_label: endpoint
                          replacement: http
                        - source_labels:
                            - __address__
                          target_label: __tmp_hash
                          modulus: 1
                          action: hashmod
                        - source_labels:
                            - __tmp_hash
                          regex: 0
                          action: keep
                    - job_name: alertmanager
                      kubernetes_sd_configs:
                        - role: endpoints
                          namespaces:
                            names:
                            - prometheus
                      metrics_path: /metrics
                      relabel_configs:
                        - source_labels:
                            - job
                          target_label: __tmp_prometheus_job_name
                        - action: keep
                          source_labels:
                            - __meta_kubernetes_service_label_app_kubernetes_io_component
                            - __meta_kubernetes_service_labelpresent_app_kubernetes_io_component
                          regex: (alertmanager);true
                        - action: keep
                          source_labels:
                            - __meta_kubernetes_service_label_app_kubernetes_io_instance
                            - __meta_kubernetes_service_labelpresent_app_kubernetes_io_instance
                          regex: (prometheus);true
                        - action: keep
                          source_labels:
                            - __meta_kubernetes_service_label_app_kubernetes_io_name
                            - __meta_kubernetes_service_labelpresent_app_kubernetes_io_name
                          regex: (prometheus);true
                        - action: keep
                          source_labels:
                            - __meta_kubernetes_endpoint_port_name
                          regex: http
                        - source_labels:
                            - __meta_kubernetes_endpoint_address_target_kind
                            - __meta_kubernetes_endpoint_address_target_name
                          separator: ;
                          regex: Node;(.*)
                          replacement: ${1}
                          target_label: node
                        - source_labels:
                            - __meta_kubernetes_endpoint_address_target_kind
                            - __meta_kubernetes_endpoint_address_target_name
                          separator: ;
                          regex: Pod;(.*)
                          replacement: ${1}
                          target_label: pod
                        - source_labels:
                            - __meta_kubernetes_namespace
                          target_label: namespace
                        - source_labels:
                            - __meta_kubernetes_service_name
                          target_label: service
                        - source_labels:
                            - __meta_kubernetes_pod_name
                          target_label: pod
                        - source_labels:
                            - __meta_kubernetes_pod_container_name
                          target_label: container
                        - action: drop
                          source_labels:
                            - __meta_kubernetes_pod_phase
                          regex: (Failed|Succeeded)
                        - source_labels:
                            - __meta_kubernetes_service_name
                          target_label: job
                          replacement: ${1}
                        - target_label: endpoint
                          replacement: http
                        - source_labels:
                            - __address__
                          target_label: __tmp_hash
                          modulus: 1
                          action: hashmod
                        - source_labels:
                            - __tmp_hash
                          regex: 0
                          action: keep
                  alerting:
                    alertmanagers:
                      - scheme: HTTP
                        static_configs:
                          - targets: [ "prometheus-alertmanager.prometheus.svc.cluster.local:80" ]
                  rule_files:
                    - rules.yaml
                rules.yaml: '{}'
